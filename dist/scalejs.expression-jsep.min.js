define("scalejs.expression-jsep",["scalejs.core","jsep","knockout"],function(core,jsep,ko){"use strict";function getIdentifiers(a){function b(a){Object.keys(a).forEach(function(c){"left"!==c&&"right"!==c&&"argument"!==c||("Identifier"===a[c].type?d.indexOf(a[c].name)===-1&&d.push(a[c].name):b(a[c]))})}try{var c=jsep(a)}catch(b){return console.warn("Left term is poorly formatted: "+a),[]}var d=[];return b(c),d}function internalEval(a){return"true"===a||a===!0||"false"!==a&&a!==!1&&(""===a||null===a?'""':"undefined"===a||void 0===a?void 0:isFinite(Number(a))?Number(a):"object"==typeof a?JSON.stringify(a):'"'+a+'"')}function evaluate(term,mapFunc,opts){function expr(tree){var returnVal,left,right,test,consequent,alternate;switch(tree.type){case"BinaryExpression":left=expr(tree.left),right=expr(tree.right),left=internalEval(left),right=internalEval(right),tree.left.value=left,tree.right.value=right;try{returnVal=Object.keys(opts.binary).indexOf(tree.operator)>-1?opts.binary[tree.operator](left,right):opts.evaluate?opts.evaluate(tree.operator,left,right):eval(left+" "+tree.operator+" "+right)}catch(a){return console.error("error parsing expr:",parseTree,a),""}return returnVal;case"UnaryExpression":var value=expr(tree.argument);value=internalEval(value),tree.argument.value=value;try{returnVal=Object.keys(opts.unary).indexOf(tree.operator)>-1?opts.unary[tree.operator](tree.argument):opts.evaluate?opts.evaluate(tree.operator,tree.argument):eval(tree.operator+tree.argument.value)}catch(a){return console.error("error parsing expr:",parseTree,a),""}return returnVal;case"LogicalExpression":if(left=expr(tree.left),left=internalEval(left),tree.left.value=left,"&&"===tree.operator&&!left||"||"===tree.operator&&left)returnVal=left,tree.left.value=left;else{right=expr(tree.right),right=internalEval(right),tree.right.value=right;try{returnVal=eval(left+tree.operator+right)}catch(a){return console.error("There was an error when parsing expression",parseTree,a),""}}return returnVal;case"Identifier":return returnVal=mapFunc(tree.name);case"Literal":return returnVal=tree.value;case"MemberExpression":return tree.object=expr(tree.object),"Identifier"==tree.property.type?tree.property.value=tree.property.name:tree.property.value=expr(tree.property),returnVal=ko.unwrap((tree.object||{})[tree.property.value]);case"CallExpression":returnVal="";var callee=expr(tree.callee);return tree.arguments=tree.arguments.map(function(a){return expr(a)}),callee instanceof Function&&(returnVal=callee.apply(tree.callee.object,tree.arguments)),returnVal;case"ArrayExpression":return returnVal=tree.elements.map(function(a){return expr(a)});case"ConditionalExpression":return test=expr(tree.test),returnVal=expr(test?tree.consequent:tree.alternate);default:return tree.value}}opts=opts||{},opts.binary=opts.binary||{},opts.unary=opts.unary||{},Object.keys(opts.binary).forEach(function(a){jsep.addBinaryOp(a,10)}),Object.keys(opts.unary).forEach(function(a){jsep.addUnaryOp(a)});var parseTree;try{parseTree=jsep(term)}catch(a){return console.error("error evaluating expr: "+term,a),""}return Object.keys(opts.binary).forEach(function(a){jsep.removeBinaryOp(a)}),Object.keys(opts.unary).forEach(function(a){jsep.removeUnaryOp(a)}),expr(parseTree)}core.registerExtension({expression:{getIdentifiers:getIdentifiers,evaluate:evaluate}})});