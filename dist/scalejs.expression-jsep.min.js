define("scalejs.expression-jsep",["scalejs!core","jsep","knockout"],function(core,jsep,ko){"use strict";function getIdentifiers(a){function b(a){Object.keys(a).forEach(function(c){("left"===c||"right"===c||"argument"===c)&&("Identifier"===a[c].type?-1===e.indexOf(a[c].name)&&e.push(a[c].name):b(a[c]))})}try{var c=jsep(a)}catch(d){return console.warn("Left term is poorly formatted: "+a),[]}var e=[];return b(c),e}function evaluate(term,mapFunc,opts){function expr(tree){var returnVal,left,right;switch(tree.type){case"BinaryExpression":left=expr(tree.left),right=expr(tree.right),left="true"===left||left===!0?!0:"false"===left||left===!1?!1:""===left||null===left?'""':"undefined"===left||void 0===left?void 0:isFinite(Number(left))?Number(left):"object"==typeof left?JSON.stringify(left):'"'+left+'"',right="true"===right||right===!0?!0:"false"===right||right===!1?!1:""===right||null===right?'""':"undefined"===right||void 0===right?void 0:isFinite(Number(right))?Number(right):"object"==typeof right?JSON.stringify(right):'"'+right+'"',tree.left.value=left,tree.right.value=right;try{returnVal=Object.keys(opts.binary).indexOf(tree.operator)>-1?opts.binary[tree.operator](left,right):opts.evaluate?opts.evaluate(tree.operator,left,right):eval(left+" "+tree.operator+" "+right)}catch(ex){return console.error("error parsing expr:",parseTree,ex),""}return returnVal;case"UnaryExpression":tree.argument.value=Number(expr(tree.argument))||0;try{returnVal=Object.keys(opts.unary).indexOf(tree.operator)>-1?opts.unary[tree.operator](tree.argument):opts.evaluate?opts.evaluate(tree.operator,tree.argument):eval(tree.operator+tree.argument.value)}catch(ex){return console.error("error parsing expr:",parseTree,ex),""}return returnVal;case"LogicalExpression":left=expr(tree.left),right=expr(tree.right),left="true"===left||left===!0?!0:"false"===left||left===!1?!1:""===left||null===left?'""':"undefined"===left||void 0===left?void 0:isFinite(Number(left))?Number(left):"object"==typeof left?JSON.stringify(left):'"'+left+'"',right="true"===right||right===!0?!0:"false"===right||right===!1?!1:""===right||null===right?'""':"undefined"===right||void 0===right?void 0:isFinite(Number(right))?Number(right):"object"==typeof right?JSON.stringify(right):'"'+right+'"',tree.left.value=left,tree.right.value=right;try{returnVal=eval(left+tree.operator+right)}catch(ex){return console.error("There was an error when parsing expression",parseTree,ex),""}return returnVal;case"Identifier":return returnVal=mapFunc(tree.name);case"MemberExpression":return tree.object=expr(tree.object),"Identifier"==tree.property.type?tree.property.value=tree.property.name:tree.property.value=expr(tree.property),returnVal=ko.unwrap((tree.object||{})[tree.property.value]);case"CallExpression":return returnVal="",tree.callee=expr(tree.callee),tree.arguments=tree.arguments.map(function(a){return expr(a)}),tree.callee instanceof Function&&(returnVal=tree.callee.apply(this,tree.arguments)),returnVal;case"ArrayExpression":return returnVal=tree.elements.map(function(a){return expr(a)});default:return tree.value}}opts=opts||{},opts.binary=opts.binary||{},opts.unary=opts.unary||{},Object.keys(opts.binary).forEach(function(a){jsep.addBinaryOp(a,10)}),Object.keys(opts.unary).forEach(function(a){jsep.addUnaryOp(a)});var parseTree;try{parseTree=jsep(term)}catch(ex){return console.error("error evaluating expr: "+term,ex),""}return Object.keys(opts.binary).forEach(function(a){jsep.removeBinaryOp(a)}),Object.keys(opts.unary).forEach(function(a){jsep.removeUnaryOp(a)}),expr(parseTree)}var is=core.type.is;core.registerExtension({expression:{getIdentifiers:getIdentifiers,evaluate:evaluate}})});